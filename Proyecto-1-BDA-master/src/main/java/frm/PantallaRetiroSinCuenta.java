/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frm;

import java.awt.Color;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author Martinez
 */
public class PantallaRetiroSinCuenta extends javax.swing.JFrame {

    /**
     * Creates new form PantallaRetiroSinCuenta
     */
    public PantallaRetiroSinCuenta() {
        initComponents();
        
        // Definir un color de fondo (gris azulado oscuro)
        Color grisAzuladoOscuro = new Color(30, 36, 44); // Valores RGB
        // Cambiar el color de fondo del formulario
        getContentPane().setBackground(grisAzuladoOscuro);
        
        
        // Agregar un FocusListener al campo txtNumFolio
        txtNumFolio.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                // Cuando se gana el foco, si el texto es igual a "Numero de Folio", borrarlo
                if (txtNumFolio.getText().equals("Numero de Folio")) {
                    txtNumFolio.setText("");
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                // Cuando se pierde el foco, si el texto está vacío, restaurar "Numero de Folio"
                if (txtNumFolio.getText().isEmpty()) {
                    txtNumFolio.setText("Numero de Folio");
                }
            }
        });
        
        // Agregar un FocusListener al campo txtClave
        txtClave.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                // Cuando se gana el foco, si el texto es igual a "Clave", borrarlo
                if (txtClave.getText().equals("Clave")) {
                    txtClave.setText("");
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                // Cuando se pierde el foco, si el texto está vacío, restaurar "Clave"
                if (txtClave.getText().isEmpty()) {
                    txtClave.setText("Clave");
                }
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtNumFolio = new javax.swing.JTextField();
        txtClave = new javax.swing.JTextField();
        btnRetirar = new javax.swing.JButton();
        lblRetiroSinCuenta = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtNumFolio.setText("Numero de Folio");

        txtClave.setText("Clave");

        btnRetirar.setText("Retirar");
        btnRetirar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetirarActionPerformed(evt);
            }
        });

        lblRetiroSinCuenta.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblRetiroSinCuenta.setForeground(new java.awt.Color(255, 255, 255));
        lblRetiroSinCuenta.setText("Retiro sin Cuenta");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtNumFolio, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(lblRetiroSinCuenta)))
                .addContainerGap(17, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRetirar)
                .addGap(96, 96, 96))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblRetiroSinCuenta)
                .addGap(18, 18, 18)
                .addComponent(txtNumFolio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRetirar)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Método para deducir el saldo de una cuenta
    private boolean deducirSaldoCuenta(long numCuenta, double monto) {
        try {
        // Conectar a la base de datos
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/banco", "root", "41502Mar");
        
        // Verificar si hay saldo suficiente en la cuenta
        String querySaldo = "SELECT saldo FROM cuenta WHERE numCuenta = ?";
        PreparedStatement psSaldo = conn.prepareStatement(querySaldo);
        psSaldo.setLong(1, numCuenta);
        ResultSet rsSaldo = psSaldo.executeQuery();
        if (rsSaldo.next()) {
            double saldoActual = rsSaldo.getDouble("saldo");
            if (saldoActual >= monto) {
                // Actualizar el saldo de la cuenta
                double nuevoSaldo = saldoActual - monto;
                String queryUpdate = "UPDATE cuenta SET saldo = ? WHERE numCuenta = ?";
                PreparedStatement psUpdate = conn.prepareStatement(queryUpdate);
                psUpdate.setDouble(1, nuevoSaldo);
                psUpdate.setLong(2, numCuenta);
                int filasActualizadas = psUpdate.executeUpdate();
                
                // Verificar si se actualizó correctamente
                if (filasActualizadas > 0) {
                    // Cerrar la conexión y retornar true (éxito)
                    conn.close();
                    return true;
                }
            }
        }
        
        // Cerrar la conexión en caso de falla y retornar false (fallo)
        conn.close();
        return false;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
        }
    
        private void realizarRetiroSinCuenta(String folioOperacion, String contraseñaRetiro) {
        // Conectar a la base de datos y verificar si el folio y la clave son válidos
            try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/banco", "root", "41502Mar");
            String query = "SELECT * FROM transaccion WHERE folioOperacion = ? AND contraseñaRetiro = ?";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, folioOperacion);
            statement.setString(2, contraseñaRetiro);
            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                // Si el retiro es válido, proceder con la operación de retiro
                // Actualizar el saldo en la cuenta correspondiente
                long cuentaOrigen = resultSet.getLong("cuentaOrigen");
                double monto = resultSet.getDouble("monto");
                if (deducirSaldoCuenta(cuentaOrigen, monto)) {
                    JOptionPane.showMessageDialog(this, "Retiro sin cuenta realizado con éxito.");
                } else {
                    JOptionPane.showMessageDialog(this, "No hay saldo suficiente para realizar el retiro.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Folio o contraseña incorrectos.");
            }

            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al procesar el retiro sin cuenta.");
        }
    }   
    
    private void btnRetirarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetirarActionPerformed
        String folioOperacion = txtNumFolio.getText();
        String contraseñaRetiro = txtClave.getText();
        // Realizar operaciones de retiro sin cuenta utilizando los datos ingresados
        // por el usuario, como folio y clave
        realizarRetiroSinCuenta(folioOperacion, contraseñaRetiro);
    }//GEN-LAST:event_btnRetirarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRetirar;
    private javax.swing.JLabel lblRetiroSinCuenta;
    private javax.swing.JTextField txtClave;
    private javax.swing.JTextField txtNumFolio;
    // End of variables declaration//GEN-END:variables
}
